services:
  postgres:
    image: postgres:15-alpine
    container_name: beer_bot_postgres
    environment:
      POSTGRES_DB: beer_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432" # Рекомендуется биндить на localhost для безопасности, если не нужен внешний доступ
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d beer_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot_network
  bot:
    build: .
    container_name: beer_bot
    environment:
      BOT_TOKEN: ${BOT_TOKEN} # Убедитесь, что переменная BOT_TOKEN доступна при запуске docker-compose
      DATABASE_URL: postgresql+asyncpg://bot_user:bot_password@postgres:5432/beer_bot
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs # Убедитесь, что директория ./logs существует на хосте или создается Dockerfile
    networks:
      - bot_network
    restart: unless-stopped
volumes:
  postgres_data:
networks:
  bot_network:
    driver: bridge