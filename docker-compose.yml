services:
  postgres:
    image: postgres:15-alpine
    container_name: beer_bot_postgres
    environment:
      POSTGRES_DB: beer_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
      TZ: Europe/Moscow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d beer_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot_network
  redis:
    image: redis:7-alpine
    container_name: beer_bot_redis
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bot_network
  bot:
    build: .
    container_name: beer_bot
    user: botuser
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql+asyncpg://bot_user:bot_password@postgres:5432/beer_bot
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: DEBUG
      LOG_FILE: ${LOG_FILE:-bot.log}
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - bot_network
    restart: unless-stopped
  celery_worker:
    build: .
    container_name: beer_bot_celery_worker
    user: botuser
    command: celery -A bot.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql+asyncpg://bot_user:bot_password@postgres:5432/beer_bot
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: DEBUG
      LOG_FILE: ${LOG_FILE:-celery_worker.log}
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "celery -A bot.tasks.celery_app status | grep -q 'OK'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - bot_network
    restart: unless-stopped
  celery_beat:
    build: .
    container_name: beer_bot_celery_beat
    user: botuser
    command: celery -A bot.tasks.celery_app beat --loglevel=info
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql+asyncpg://bot_user:bot_password@postgres:5432/beer_bot
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: DEBUG
      LOG_FILE: ${LOG_FILE:-celery_beat.log}
      TZ: Europe/Moscow
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - bot_network
    restart: unless-stopped
  flower:
    build: .
    container_name: beer_bot_flower
    user: botuser
    command: celery -A bot.tasks.celery_app flower --port=5555
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql+asyncpg://bot_user:bot_password@postgres:5432/beer_bot
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: DEBUG
      LOG_FILE: ${LOG_FILE:-flower.log}
      TZ: Europe/Moscow
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    ports:
      - "127.0.0.1:5555:5555"
    volumes:
      - ./logs:/app/logs
    networks:
      - bot_network
    restart: unless-stopped
volumes:
  postgres_data:
  redis_data:
networks:
  bot_network:
    driver: bridge