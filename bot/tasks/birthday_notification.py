from celery import shared_task
from sqlalchemy.ext.asyncio import AsyncSession
from bot.core.database import get_async_session
from bot.repositories.user_repo import UserRepository
from bot.repositories.group_user_repo import GroupUserRepository
from bot.utils.logger import setup_logger
from aiogram import Bot
from aiogram.exceptions import TelegramAPIError
import pendulum
from sqlalchemy import select
from bot.core.models import Group, GroupUser
import os
from dotenv import load_dotenv
import asyncio

load_dotenv()
logger = setup_logger(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
BIRTHDAY_MESSAGE = "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {mentions}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! ü•≥"
NO_BIRTHDAY_MESSAGE = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤. üòä"


@shared_task(bind=True, ignore_result=True)
def check_birthdays(self):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã."""
    logger.info("Processing daily birthday check task")
    bot = None
    try:
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN is not set in environment variables")
            raise ValueError("BOT_TOKEN is not set")

        bot = Bot(token=BOT_TOKEN)

        async def run():
            async for session in get_async_session():
                try:
                    today = pendulum.now("Europe/Moscow").date()
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
                    users = await UserRepository.get_users_by_birthday(
                        session, today.day, today.month
                    )
                    if not users:
                        logger.info("No birthdays today")
                        return

                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç
                    birthday_users = {user.id: user for user in users}
                    user_ids = list(birthday_users.keys())

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –µ—Å—Ç—å —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    stmt = (
                        select(Group, GroupUser)
                        .join(GroupUser, Group.id == GroupUser.group_id)
                        .where(GroupUser.user_id.in_(user_ids))
                    )
                    result = await session.execute(stmt)
                    group_users = result.all()

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
                    groups_birthdays = {}
                    for group, group_user in group_users:
                        if group.chat_id not in groups_birthdays:
                            groups_birthdays[group.chat_id] = []
                        groups_birthdays[group.chat_id].append(
                            birthday_users[group_user.user_id]
                        )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
                    for chat_id, birthday_users in groups_birthdays.items():
                        mentions = ", ".join(
                            [
                                f"@{user.username}" if user.username else user.name
                                for user in birthday_users
                            ]
                        )
                        message_text = BIRTHDAY_MESSAGE.format(mentions=mentions)
                        try:
                            await bot.send_message(chat_id=chat_id, text=message_text)
                            logger.info(
                                f"Sent birthday message to group {chat_id}: {message_text}"
                            )
                        except TelegramAPIError as e:
                            logger.error(
                                f"Failed to send birthday message to group {chat_id}: {e}"
                            )
                except Exception as e:
                    logger.error(f"Error processing birthday check: {e}", exc_info=True)
                    raise

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_event_loop()
        loop.run_until_complete(run())
    except Exception as e:
        logger.error(f"Error in check_birthdays task: {e}", exc_info=True)
        raise self.retry(exc=e, countdown=60)
    finally:
        if bot:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(bot.session.close())
