from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.core.database import get_async_session
from bot.repositories.user_repo import UserRepository
from bot.repositories.event_repo import EventRepository
from bot.core.schemas import EventCreate
from bot.utils.logger import setup_logger
import pendulum
import os
from datetime import time
from sqlalchemy.exc import ProgrammingError
import random

logger = setup_logger(__name__)
router = Router()
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "267863612"))


class EventCreationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_location = State()
    waiting_for_beer_choice = State()
    waiting_for_beer_options = State()


def get_cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation"
        )
    )
    return builder.as_markup()


def get_beer_choice_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="choice_yes"))
    builder.add(types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="choice_no"))
    builder.add(
        types.InlineKeyboardButton(
            text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_event_creation"
        )
    )
    builder.adjust(2, 1)
    return builder.as_markup()


@router.message(Command("create_event"))
async def create_event_handler(message: types.Message, bot: Bot, state: FSMContext):
    try:
        if message.chat.type != "private":
            return
        if message.from_user.id != ADMIN_TELEGRAM_ID:
            await bot.send_message(
                chat_id=message.chat.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."
            )
            return
        await bot.send_message(
            chat_id=message.chat.id,
            text="üéâ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(EventCreationStates.waiting_for_name)
    except Exception as e:
        logger.error(f"Error in create_event handler: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(EventCreationStates.waiting_for_name)
async def process_event_name(message: types.Message, bot: Bot, state: FSMContext):
    try:
        name = message.text.strip()
        if not (1 <= len(name) <= 200):
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return
        await state.update_data(name=name)
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(EventCreationStates.waiting_for_date)
    except Exception as e:
        logger.error(f"Error processing event name: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(EventCreationStates.waiting_for_date)
async def process_event_date(message: types.Message, bot: Bot, state: FSMContext):
    try:
        date_str = message.text.strip()
        event_date = pendulum.from_format(
            date_str, "DD.MM.YYYY", tz="Europe/Moscow"
        ).date()
        today = pendulum.now("Europe/Moscow").date()
        if event_date < today:
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(),
            )
            return
        await state.update_data(event_date=event_date)
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –î–∞—Ç–∞: {event_date.strftime('%d.%m.%Y')}\n\nüïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 18:30",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(EventCreationStates.waiting_for_time)
    except pendulum.exceptions.ParserError:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024",
            reply_markup=get_cancel_keyboard(),
        )
    except Exception as e:
        logger.error(f"Error processing event date: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(EventCreationStates.waiting_for_time)
async def process_event_time(message: types.Message, bot: Bot, state: FSMContext):
    try:
        time_str = message.text.strip()
        hour, minute = map(int, time_str.split(":"))
        event_time = time(hour=hour, minute=minute)
        await state.update_data(event_time=event_time)
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –í—Ä–µ–º—è: {event_time.strftime('%H:%M')}\n\nüìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, 55.7558,37.6173\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \"-\" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(EventCreationStates.waiting_for_location)
    except ValueError:
        await bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 18:30",
            reply_markup=get_cancel_keyboard(),
        )
    except Exception as e:
        logger.error(f"Error processing event time: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(EventCreationStates.waiting_for_location)
async def process_event_location(message: types.Message, bot: Bot, state: FSMContext):
    try:
        input_str = message.text.strip()
        latitude = None
        longitude = None
        if input_str != "-":
            try:
                lat_str, lon_str = map(str.strip, input_str.split(","))
                latitude = float(lat_str)
                longitude = float(lon_str)
                if not (-90 <= latitude <= 90):
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text="‚ùå –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç -90 –¥–æ 90. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                        reply_markup=get_cancel_keyboard(),
                    )
                    return
                if not (-180 <= longitude <= 180):
                    await bot.send_message(
                        chat_id=message.chat.id,
                        text="‚ùå –î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç -180 –¥–æ 180. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                        reply_markup=get_cancel_keyboard(),
                    )
                    return
            except ValueError:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text='‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 55.7558,37.6173) –∏–ª–∏ "-". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
                    reply_markup=get_cancel_keyboard(),
                )
                return
        await state.update_data(latitude=latitude, longitude=longitude)
        await bot.send_message(
            chat_id=message.chat.id,
            text='üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∞—Ä –•–º–µ–ª—å) –∏–ª–∏ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:',
            reply_markup=get_cancel_keyboard(),
        )
        await state.set_state(EventCreationStates.waiting_for_beer_choice)
    except Exception as e:
        logger.error(f"Error processing event location: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(EventCreationStates.waiting_for_beer_choice)
async def process_event_location_name(
    message: types.Message, bot: Bot, state: FSMContext
):
    try:
        location_name = None
        if message.text and message.text.strip() != "-":
            location_name = message.text.strip()[:500]
        await state.update_data(location_name=location_name)
        location_text = location_name if location_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚úÖ –ú–µ—Å—Ç–æ: {location_text}\n\nüç∫ –ë—É–¥–µ—Ç –ª–∏ –≤—ã–±–æ—Ä –ø–∏–≤–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–∏?",
            reply_markup=get_beer_choice_keyboard(),
        )
        await state.set_state(EventCreationStates.waiting_for_beer_choice)
    except Exception as e:
        logger.error(f"Error processing event location name: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(
    lambda c: c.data in ["choice_yes", "choice_no"],
)
async def process_beer_choice(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        has_beer_choice = callback_query.data == "choice_yes"
        await state.update_data(has_beer_choice=has_beer_choice)
        if has_beer_choice:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="üç∫ –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∏–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ù–∞–ø—Ä–∏–º–µ—Ä: IPA, Wheat Beer",
                reply_markup=get_cancel_keyboard(),
            )
            await state.set_state(EventCreationStates.waiting_for_beer_options)
        else:
            await finalize_event_creation(
                callback_query.message, bot, state, None, None
            )
    except Exception as e:
        logger.error(f"Error processing beer choice: {e}", exc_info=True)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


@router.message(EventCreationStates.waiting_for_beer_options)
async def process_beer_options(message: types.Message, bot: Bot, state: FSMContext):
    try:
        beer_options = [option.strip() for option in message.text.split(",")]
        if len(beer_options) != 2 or not all(
            1 <= len(option) <= 100 for option in beer_options
        ):
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∏–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∫–∞–∂–¥—ã–π –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)\n–ù–∞–ø—Ä–∏–º–µ—Ä: IPA, Wheat Beer",
                reply_markup=get_cancel_keyboard(),
            )
            return
        await finalize_event_creation(
            message, bot, state, beer_options[0], beer_options[1]
        )
    except Exception as e:
        logger.error(f"Error processing beer options: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard(),
        )


async def finalize_event_creation(
    message: types.Message,
    bot: Bot,
    state: FSMContext,
    beer_option_1: str | None,
    beer_option_2: str | None,
):
    try:
        data = await state.get_data()
        has_beer_choice = data.get("has_beer_choice", False)
        if has_beer_choice and (not beer_option_1 or not beer_option_2):
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –û—à–∏–±–∫–∞: –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø–∏–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–∏–≤–∞.",
                reply_markup=get_cancel_keyboard(),
            )
            return
        event_data = EventCreate(
            name=data["name"],
            event_date=data["event_date"],
            event_time=data["event_time"],
            latitude=data.get("latitude"),
            longitude=data.get("longitude"),
            location_name=data.get("location_name"),
            has_beer_choice=has_beer_choice,
            beer_option_1=beer_option_1,
            beer_option_2=beer_option_2,
            created_by=message.from_user.id,
        )
        async for session in get_async_session():
            event = await EventRepository.create_event(session, event_data)
            summary = f"üéâ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            summary += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event.name}\n"
            summary += f"üìÖ –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
            summary += f"üïê –í—Ä–µ–º—è: {event.event_time.strftime('%H:%M')}\n"
            summary += f"üìç –ú–µ—Å—Ç–æ: {event.location_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            summary += f"üç∫ –í—ã–±–æ—Ä –ø–∏–≤–∞: {'–î–∞' if event.has_beer_choice else '–ù–µ—Ç'}\n"
            if event.has_beer_choice and event.beer_option_1 and event.beer_option_2:
                summary += (
                    f"üçª –í–∞—Ä–∏–∞–Ω—Ç—ã: {event.beer_option_1}, {event.beer_option_2}\n"
                )
            await bot.send_message(chat_id=message.chat.id, text=summary)
            await send_event_notifications(bot, event)
            logger.info(f"Event created: {event.id} by {message.from_user.id}")
        await state.clear()
    except ProgrammingError as e:
        logger.error(f"Database schema error: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        )
    except Exception as e:
        logger.error(f"Error finalizing event creation: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


async def send_event_notifications(bot: Bot, event):
    try:
        async for session in get_async_session():
            users = await UserRepository.get_all_users(session, limit=1000)
            notification_text = f"üéâ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!\n\n"
            notification_text += f"üìù {event.name}\n"
            notification_text += f"üìÖ {event.event_date.strftime('%d.%m.%Y')}\n"
            notification_text += f"üïê {event.event_time.strftime('%H:%M')}\n"
            if event.location_name:
                notification_text += f"üìç {event.location_name}\n"
            if event.has_beer_choice and event.beer_option_1 and event.beer_option_2:
                notification_text += (
                    f"üçª –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–∏–≤–∞: {event.beer_option_1}, {event.beer_option_2}\n"
                )
            else:
                default_beer = random.choice(["–ü–µ–Ω–Ω—ã–π –ò–∑–æ—Ç–æ–Ω–∏–∫", "–í–∫—É—Å–Ω–µ–π—à–∏–π –ª–∞–≥–µ—Ä"])
                notification_text += f"üç∫ –ù–∞ —Ñ–∏–Ω–∏—à–µ –∂–¥–µ–º: {default_beer}\n"
            notification_text += "\n–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–∏! üéä"
            successful_sends = 0
            failed_sends = 0
            for user in users:
                try:
                    await bot.send_message(
                        chat_id=user.telegram_id, text=notification_text
                    )
                    successful_sends += 1
                except Exception as e:
                    logger.warning(
                        f"Failed to send notification to user {user.telegram_id}: {e}"
                    )
                    failed_sends += 1
            logger.info(
                f"Event notifications sent: {successful_sends} successful, {failed_sends} failed"
            )
    except Exception as e:
        logger.error(f"Error sending event notifications: {e}", exc_info=True)


@router.callback_query(lambda c: c.data == "cancel_event_creation")
async def cancel_event_creation(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        await state.clear()
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        )
    except Exception as e:
        logger.error(f"Error canceling event creation: {e}", exc_info=True)
