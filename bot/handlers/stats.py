from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.core.database import get_async_session
from bot.core.models import BeerTypeEnum
from bot.repositories.beer_repo import BeerRepository
from bot.repositories.user_repo import UserRepository
from bot.core.schemas import UserCreate
from bot.utils.logger import setup_logger
import pendulum

logger = setup_logger(__name__)
router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_birth_date = State()


def get_command_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üç∫ –í—ã–±—Ä–∞—Ç—å –ø–∏–≤–æ", callback_data="cmd_beer")
    )
    builder.add(
        types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="cmd_profile")
    )
    builder.add(
        types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="cmd_start")
    )
    builder.adjust(2)
    return builder.as_markup()


@router.message(Command("stats"))
async def stats_handler(message: types.Message, bot: Bot):
    try:
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, message.from_user.id
            )
            if not user:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=get_command_keyboard(),
                )
                return
            beer_stats = await BeerRepository.get_beer_stats(session)
            beer_names = {
                BeerTypeEnum.LAGER.value: "üç∫ Lager",
                BeerTypeEnum.HAND_OF_GOD.value: "üçª Hand of God",
            }
            text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞:\n\n"
            if beer_stats:
                for beer_type_value, count in beer_stats.items():
                    display_name = beer_names.get(beer_type_value, beer_type_value)
                    text += f"{display_name}: {count} —Ä–∞–∑(–∞)\n"
            else:
                text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª."
            text += "\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            await bot.send_message(
                chat_id=message.chat.id, text=text, reply_markup=get_command_keyboard()
            )
    except Exception as e:
        logger.error(f"Error in stats handler: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_command_keyboard(),
        )


@router.callback_query(lambda c: c.data == "cmd_stats")
async def cmd_stats_callback(callback_query: types.CallbackQuery, bot: Bot):
    try:
        await callback_query.answer()
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, callback_query.from_user.id
            )
            if not user:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=get_command_keyboard(),
                )
                return
            beer_stats = await BeerRepository.get_beer_stats(session)
            beer_names = {
                BeerTypeEnum.LAGER.value: "üç∫ Lager",
                BeerTypeEnum.HAND_OF_GOD.value: "üçª Hand of God",
            }
            text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞:\n\n"
            if beer_stats:
                for beer_type_value, count in beer_stats.items():
                    display_name = beer_names.get(beer_type_value, beer_type_value)
                    text += f"{display_name}: {count} —Ä–∞–∑(–∞)\n"
            else:
                text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª."
            text += "\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=text,
                reply_markup=get_command_keyboard(),
            )
    except Exception as e:
        logger.error(f"Error in cmd_stats callback: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_command_keyboard(),
        )
