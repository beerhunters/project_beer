import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.core.database import get_async_session
from bot.repositories.user_repo import UserRepository
from bot.repositories.beer_repo import BeerRepository
from bot.core.schemas import BeerChoiceCreate
from bot.core.models import BeerTypeEnum

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("beer"))
async def beer_selection_handler(message: types.Message):
    try:
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, message.from_user.id
            )
            if not user:
                await message.answer(
                    "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            builder = InlineKeyboardBuilder()
            builder.add(
                types.InlineKeyboardButton(text="üç∫ Lager", callback_data="beer_lager")
            )
            builder.add(
                types.InlineKeyboardButton(
                    text="üçª Hand of God", callback_data="beer_hand_of_god"
                )
            )
            builder.adjust(2)
            await message.answer(
                f"üç∫ –ü—Ä–∏–≤–µ—Ç, {user.name}!\n" "–ö–∞–∫–æ–µ –ø–∏–≤–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
                reply_markup=builder.as_markup(),
            )
    except Exception as e:
        logger.error(f"Error in beer selection handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data.startswith("beer_"))
async def beer_choice_callback(callback_query: types.CallbackQuery):
    try:
        await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞
        beer_type_map = {
            "beer_lager": BeerTypeEnum.LAGER,
            "beer_hand_of_god": BeerTypeEnum.HAND_OF_GOD,
        }
        beer_type = beer_type_map.get(callback_query.data)
        if not beer_type:
            await callback_query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∏–≤–∞!")
            return
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, callback_query.from_user.id
            )
            if not user:
                await callback_query.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            choice_data = BeerChoiceCreate(user_id=user.id, beer_type=beer_type)
            await BeerRepository.create_choice(session, choice_data)  # –°–æ–∑–¥–∞–µ–º –≤—ã–±–æ—Ä
            user_stats = await BeerRepository.get_user_beer_stats(
                session, user.id
            )  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            beer_names = {
                BeerTypeEnum.LAGER.value: "üç∫ Lager",
                BeerTypeEnum.HAND_OF_GOD.value: "üçª Hand of God",
            }
            selected_beer_display_name = beer_names.get(
                beer_type.value, beer_type.value
            )
            message_text = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢—ã –≤—ã–±—Ä–∞–ª {selected_beer_display_name}\n\n"
            )
            if user_stats:
                stats_lines = ["üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"]
                for db_beer_type_value, count in user_stats.items():
                    display_name = beer_names.get(
                        db_beer_type_value, db_beer_type_value
                    )
                    stats_lines.append(f"{display_name}: {count}")
                message_text += "\n".join(stats_lines) + "\n"
            else:
                # –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –µ—Å–ª–∏ –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã:
                message_text += "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–∏–≤–∞.\n"
            message_text += (
                "\nüîÑ /beer - –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑\n"
                "üìä /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "üë§ /profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
            )
            await callback_query.message.edit_text(message_text)
    except Exception as e:
        logger.error(f"Error in beer choice callback: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
