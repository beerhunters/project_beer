from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot.core.database import get_async_session
from bot.repositories.user_repo import UserRepository
from bot.repositories.event_repo import EventRepository
from bot.repositories.beer_repo import BeerRepository
from bot.core.schemas import BeerChoiceCreate
from bot.utils.decorators import private_chat_only
from bot.utils.logger import setup_logger
import pendulum
from datetime import datetime, time, timedelta
from math import radians, sin, cos, sqrt, atan2

logger = setup_logger(__name__)
router = Router()


class BeerSelectionStates(StatesGroup):
    waiting_for_location = State()


def get_command_keyboard(event_id: int = 0):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="cmd_profile")
    )
    builder.add(
        types.InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="cmd_start")
    )
    builder.adjust(2)
    return builder.as_markup()


def get_location_keyboard(event_id: int):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    cancel_builder = InlineKeyboardBuilder()
    cancel_builder.add(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_beer_selection"
        )
    )
    return keyboard, cancel_builder.as_markup()


def get_beer_choice_keyboard(event):
    builder = InlineKeyboardBuilder()
    valid_options = []
    if event.has_beer_choice and event.beer_option_1 and event.beer_option_2:
        valid_options = [event.beer_option_1, event.beer_option_2]
        builder.add(
            types.InlineKeyboardButton(
                text=f"üç∫ {event.beer_option_1}",
                callback_data=f"beer_{event.id}_{event.beer_option_1}",
            )
        )
        builder.add(
            types.InlineKeyboardButton(
                text=f"üç∫ {event.beer_option_2}",
                callback_data=f"beer_{event.id}_{event.beer_option_2}",
            )
        )
    else:
        valid_options = [event.beer_option_1 or "–õ–∞–≥–µ—Ä"]
        builder.add(
            types.InlineKeyboardButton(
                text=f"üç∫ {valid_options[0]}",
                callback_data=f"beer_{event.id}_{valid_options[0]}",
            )
        )
    builder.add(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_beer_selection"
        )
    )
    builder.adjust(1 if not event.has_beer_choice else 2)
    return builder.as_markup(), valid_options


def get_event_selection_keyboard(events):
    builder = InlineKeyboardBuilder()
    for event in events:
        time_str = event.event_time.strftime("%H:%M")
        button_text = f"üìÖ {event.name} @ {time_str}"
        builder.add(
            types.InlineKeyboardButton(
                text=button_text, callback_data=f"select_event_{event.id}"
            )
        )
    builder.add(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_beer_selection"
        )
    )
    builder.adjust(1)
    return builder.as_markup()


EARTH_RADIUS_M = 6371000


def haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    if not all(isinstance(x, (int, float)) and -90 <= x <= 90 for x in (lat1, lat2)):
        raise ValueError("Latitudes must be between -90 and 90 degrees")
    if not all(isinstance(x, (int, float)) and -180 <= x <= 180 for x in (lon1, lon2)):
        raise ValueError("Longitudes must be between -180 and 180 degrees")
    if not all(
        isinstance(x, (int, float)) and x == x for x in (lat1, lon1, lat2, lon2)
    ):
        raise ValueError("Coordinates must be finite numbers")
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = EARTH_RADIUS_M * c
    return distance


def is_event_selection_available(event, today, current_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±–æ—Ä –ø–∏–≤–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è (30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ —Ä–∞–Ω—å—à–µ)"""
    if event.event_date != today:
        return False
    current_dt = datetime.combine(today, current_time)
    event_start = datetime.combine(today, event.event_time)
    window_start = event_start - timedelta(minutes=30)
    return window_start <= current_dt <= event_start


async def get_all_upcoming_events(session, today):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    events = await EventRepository.get_upcoming_events_by_date(
        session, today, limit=100
    )
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    return [event for event in events if event.event_date == today]


@router.message(Command("beer"))
@private_chat_only(response_probability=0.5)
async def beer_selection_handler(message: types.Message, bot: Bot, state: FSMContext):
    try:
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, message.from_user.id
            )
            if not user:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=get_command_keyboard(),
                )
                return

            today = pendulum.now("Europe/Moscow").date()
            upcoming_events = await get_all_upcoming_events(session, today)

            if not upcoming_events:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!",
                    reply_markup=get_command_keyboard(),
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            keyboard = get_event_selection_keyboard(upcoming_events)
            await bot.send_message(
                chat_id=message.chat.id,
                text="üìÖ –í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞:",
                reply_markup=keyboard,
            )

    except Exception as e:
        logger.error(f"Error in beer selection handler: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_command_keyboard(),
        )


@router.callback_query(lambda c: c.data.startswith("select_event_"))
@private_chat_only(response_probability=0.5)
async def select_event_callback(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        event_id = int(callback_query.data.split("_")[2])

        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, callback_query.from_user.id
            )
            if not user:
                await bot.edit_message_text(
                    text="‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(),
                )
                return

            event = await EventRepository.get_event_by_id(session, event_id)
            if not event:
                await bot.edit_message_text(
                    text="‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(),
                )
                return

            today = pendulum.now("Europe/Moscow").date()
            current_time = pendulum.now("Europe/Moscow").time()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±–æ—Ä –ø–∏–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            if not is_event_selection_available(event, today, current_time):
                event_start = datetime.combine(today, event.event_time)
                window_start = event_start - timedelta(minutes=30)
                current_dt = datetime.combine(today, current_time)

                if current_dt < window_start:
                    # –°–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å (–±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
                    time_until_selection = window_start - current_dt
                    total_seconds = int(time_until_selection.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    seconds = total_seconds % 60

                    time_str = ""
                    if hours > 0:
                        time_str += f"{hours} —á. "
                    if minutes > 0:
                        time_str += f"{minutes} –º–∏–Ω."
                    elif hours == 0 and minutes == 0:
                        time_str += f"{seconds} —Å–µ–∫."

                    await bot.edit_message_text(
                        text=f"‚è∞ –í—ã–±–æ—Ä –ø–∏–≤–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event.name}' –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {time_str}\n\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—Å—è –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è.",
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        reply_markup=get_command_keyboard(event.id),
                    )
                else:
                    # –í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ
                    await bot.edit_message_text(
                        text="‚ùå –í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏—Å—Ç–µ–∫–ª–æ.",
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        reply_markup=get_command_keyboard(event.id),
                    )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±–∏—Ä–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            has_chosen = await BeerRepository.has_user_chosen_for_event(
                session, user.id, event
            )
            if has_chosen:
                await bot.edit_message_text(
                    text="‚ùå –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–∏–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(event.id),
                )
                return

            await state.update_data(event_id=event.id)

            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è
            if event.latitude is not None and event.longitude is not None:
                reply_keyboard, cancel_keyboard = get_location_keyboard(event.id)
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text="üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã —Ä—è–¥–æ–º —Å –º–µ—Å—Ç–æ–º —Å–æ–±—ã—Ç–∏—è.",
                    reply_markup=reply_keyboard,
                )
                await state.set_state(BeerSelectionStates.waiting_for_location)
            else:
                # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–∏–≤–∞
                keyboard, _ = get_beer_choice_keyboard(event)
                await bot.edit_message_text(
                    text=f"üç∫ –ü—Ä–∏–≤–µ—Ç, {user.name}!\n–í—ã–±–µ—Ä–∏ –ø–∏–≤–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event.name}':",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=keyboard,
                )

    except Exception as e:
        logger.error(f"Error in select event callback: {e}", exc_info=True)
        await bot.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=get_command_keyboard(),
        )


@router.message(BeerSelectionStates.waiting_for_location)
@private_chat_only(response_probability=0.5)
async def process_user_location(message: types.Message, bot: Bot, state: FSMContext):
    try:
        if not message.location:
            reply_keyboard, cancel_keyboard = get_location_keyboard(0)
            await bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.",
                reply_markup=reply_keyboard,
            )
            return

        user_lat = message.location.latitude
        user_lon = message.location.longitude
        data = await state.get_data()
        event_id = data.get("event_id")

        async for session in get_async_session():
            event = await EventRepository.get_event_by_id(session, event_id)
            if not event or event.latitude is None or event.longitude is None:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                    reply_markup=get_command_keyboard(event_id or 0),
                )
                await state.clear()
                return

            distance = haversine_distance(
                user_lat, user_lon, event.latitude, event.longitude
            )

            if distance > 500:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"‚ùå –¢—ã —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –º–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è ({int(distance)} –º). –ù—É–∂–Ω–æ –±—ã—Ç—å –≤ —Ä–∞–¥–∏—É—Å–µ 500 –º.",
                    reply_markup=get_command_keyboard(event_id),
                )
                await state.clear()
                return

            user = await UserRepository.get_user_by_telegram_id(
                session, message.from_user.id
            )

            has_chosen = await BeerRepository.has_user_chosen_for_event(
                session, user.id, event
            )
            if has_chosen:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="‚ùå –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–∏–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!",
                    reply_markup=get_command_keyboard(event_id),
                )
                await state.clear()
                return

            keyboard, _ = get_beer_choice_keyboard(event)
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"‚úÖ –¢—ã –Ω–∞ –º–µ—Å—Ç–µ! –í—ã–±–µ—Ä–∏ –ø–∏–≤–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event.name}':",
                reply_markup=keyboard,
            )
            await state.clear()

    except Exception as e:
        logger.error(f"Error processing user location: {e}", exc_info=True)
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_command_keyboard(),
        )
        await state.clear()


@router.callback_query(lambda c: c.data.startswith("beer_"))
@private_chat_only(response_probability=0.5)
async def beer_choice_callback(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        parts = callback_query.data.split("_")
        if len(parts) != 3:
            await bot.edit_message_text(
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=get_command_keyboard(),
            )
            return

        event_id = int(parts[1])
        beer_choice = parts[2]

        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, callback_query.from_user.id
            )
            if not user:
                await bot.edit_message_text(
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(),
                )
                return

            event = await EventRepository.get_event_by_id(session, event_id)
            if not event:
                await bot.edit_message_text(
                    text="‚ùå –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(),
                )
                return

            today = pendulum.now("Europe/Moscow").date()
            current_time = pendulum.now("Europe/Moscow").time()

            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–æ—Ä–∞
            if not is_event_selection_available(event, today, current_time):
                await bot.edit_message_text(
                    text="‚ùå –í—Ä–µ–º—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(event_id),
                )
                return

            keyboard, valid_options = get_beer_choice_keyboard(event)
            if beer_choice not in valid_options:
                await bot.edit_message_text(
                    text="‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—ã–±–æ—Ä –ø–∏–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=keyboard,
                )
                return

            has_chosen = await BeerRepository.has_user_chosen_for_event(
                session, user.id, event
            )
            if has_chosen:
                await bot.edit_message_text(
                    text="‚ùå –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–∏–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!",
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=get_command_keyboard(event_id),
                )
                return

            choice_data = BeerChoiceCreate(
                user_id=user.id, event_id=event.id, beer_choice=beer_choice
            )
            choice = await BeerRepository.create_choice(session, choice_data)
            user_stats = await BeerRepository.get_user_beer_stats(session, user.id)

            message_text = f"‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢—ã –≤—ã–±—Ä–∞–ª üç∫ {beer_choice}\n\n"
            if user_stats:
                stats_lines = ["üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"]
                for beer_type, count in user_stats.items():
                    stats_lines.append(f"üç∫ {beer_type}: {count}")
                message_text += "\n".join(stats_lines) + "\n"
            else:
                message_text += "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ã–±–æ—Ä—É –ø–∏–≤–∞.\n"

            message_text += "\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"

            logger.info(
                f"Beer choice saved for user {user.telegram_id}: {choice.beer_choice}, event {event.id}, stats: {user_stats}"
            )

            await bot.edit_message_text(
                message_id=callback_query.message.message_id,
                text=message_text,
                chat_id=callback_query.message.chat.id,
                reply_markup=get_command_keyboard(event_id),
            )

    except Exception as e:
        logger.error(f"Error in beer choice callback: {e}", exc_info=True)
        await bot.edit_message_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=get_command_keyboard(),
        )


@router.callback_query(lambda c: c.data == "cancel_beer_selection")
@private_chat_only(response_probability=0.5)
async def cancel_beer_selection(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        await state.clear()
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –í—ã–±–æ—Ä –ø–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_command_keyboard(),
        )
    except Exception as e:
        logger.error(f"Error canceling beer selection: {e}", exc_info=True)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_command_keyboard(),
        )


@router.callback_query(lambda c: c.data == "cmd_beer")
@private_chat_only(response_probability=0.5)
async def cmd_beer_callback(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, callback_query.from_user.id
            )
            if not user:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    reply_markup=get_command_keyboard(),
                )
                return

            today = pendulum.now("Europe/Moscow").date()
            upcoming_events = await get_all_upcoming_events(session, today)

            if not upcoming_events:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!",
                    reply_markup=get_command_keyboard(),
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
            keyboard = get_event_selection_keyboard(upcoming_events)
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="üìÖ –í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏–≤–∞:",
                reply_markup=keyboard,
            )

    except Exception as e:
        logger.error(f"Error in cmd_beer callback: {e}", exc_info=True)
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=get_command_keyboard(),
        )
