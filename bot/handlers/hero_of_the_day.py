from aiogram import Router, types, Bot
from aiogram.filters import Command
from bot.core.database import get_async_session
from bot.repositories.group_user_repo import GroupUserRepository
from bot.utils.decorators import group_chat_only
from bot.utils.logger import setup_logger
import pendulum
import asyncio

logger = setup_logger(__name__)
router = Router()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
HERO_COMMAND_SUCCESS_MESSAGE = "üèÜ –ì–µ—Ä–æ–π –¥–Ω—è: @{username}!"
HERO_COMMAND_NO_HERO_MESSAGE = "‚ùå –ì–µ—Ä–æ–π –¥–Ω—è –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω. –ñ–¥–∏—Ç–µ –≤—ã–±–æ—Ä–æ–≤ –≤ 10:00!"
HERO_COMMAND_ERROR_MESSAGE = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
GROUP_ADDED_MESSAGE = (
    "üëã –ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –≤—ã–±–∏—Ä–∞—Ç—å –ì–µ—Ä–æ—è –î–Ω—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00!\n"
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é /become_hero."
)
USER_REGISTERED_MESSAGE = (
    "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –ì–µ—Ä–æ—è –î–Ω—è! –ñ–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —á–∞—Å–∞!"
)
USER_ALREADY_CANDIDATE_MESSAGE = "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –ì–µ—Ä–æ—è –î–Ω—è!"
USER_NOT_FOUND_MESSAGE = (
    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
)


@router.message(Command("hero"))
@group_chat_only(response_probability=1.0)
async def hero_command_handler(message: types.Message, bot: Bot):
    try:
        chat_id = message.chat.id
        chat_title = message.chat.title or f"Group {chat_id}"

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É
        async for session in get_async_session():
            group = await GroupUserRepository.get_group_by_chat_id(session, chat_id)
            if not group:
                logger.info(
                    f"Registering new group: chat_id={chat_id}, title={chat_title}"
                )
                await GroupUserRepository.add_group(session, chat_id, chat_title)
                await bot.send_message(
                    chat_id=chat_id,
                    text=GROUP_ADDED_MESSAGE,
                )
                logger.info(f"Group registered in database: chat_id={chat_id}")
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –ì—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
                )
                logger.debug(f"Group already registered: chat_id={chat_id}")
    except Exception as e:
        logger.error(f"Error in hero command handler: {e}", exc_info=True)
        await bot.send_message(
            chat_id=chat_id,
            text=HERO_COMMAND_ERROR_MESSAGE,
        )


@router.message(Command("hero_today"))
@group_chat_only(response_probability=1.0)
async def hero_today_handler(message: types.Message, bot: Bot):
    try:
        chat_id = message.chat.id

        async for session in get_async_session():
            today = pendulum.now("Europe/Moscow").date()
            hero = await GroupUserRepository.get_hero_of_the_day(
                session, chat_id, today
            )
            if hero:
                user = await GroupUserRepository.get_user_by_id(session, hero.user_id)
                await bot.send_message(
                    chat_id=chat_id,
                    text=HERO_COMMAND_SUCCESS_MESSAGE.format(
                        username=user.username or user.name
                    ),
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=HERO_COMMAND_NO_HERO_MESSAGE,
                )
    except Exception as e:
        logger.error(f"Error in hero_today handler: {e}", exc_info=True)
        await bot.send_message(
            chat_id=chat_id,
            text=HERO_COMMAND_ERROR_MESSAGE,
        )


@router.message(Command("become_hero"))
@group_chat_only(response_probability=1.0)
async def become_hero_handler(message: types.Message, bot: Bot):
    try:
        chat_id = message.chat.id
        telegram_id = message.from_user.id
        username = message.from_user.username
        name = message.from_user.first_name or f"User {telegram_id}"

        async for session in get_async_session():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É
            group = await GroupUserRepository.get_group_by_chat_id(session, chat_id)
            if not group:
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /hero.",
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ users –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            user = await GroupUserRepository.get_user_by_telegram_id(
                session, telegram_id
            )
            if not user or not user.name or not user.birth_date:
                bot_info = await bot.get_me()
                bot_username = f"@{bot_info.username}"
                deep_link = f"t.me/{bot_username}?start=group_{chat_id}"
                await bot.send_message(
                    chat_id=chat_id,
                    text=USER_NOT_FOUND_MESSAGE,
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="–ù–∞—á–∞—Ç—å —Å –±–æ—Ç–æ–º", url=deep_link
                                )
                            ]
                        ]
                    ),
                )
                logger.info(
                    f"User {telegram_id} not found or incomplete, prompted to start private chat with deep link"
                )
                return

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            is_new = await GroupUserRepository.register_candidate(
                session, telegram_id, chat_id, name, username
            )
            if is_new:
                await bot.send_message(
                    chat_id=chat_id,
                    text=USER_REGISTERED_MESSAGE,
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=USER_ALREADY_CANDIDATE_MESSAGE,
                )
            logger.info(
                f"User {telegram_id} processed as hero candidate in group {chat_id}"
            )
    except Exception as e:
        logger.error(f"Error in become_hero handler: {e}", exc_info=True)
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )
