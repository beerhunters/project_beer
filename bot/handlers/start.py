from aiogram import Router, types, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.core.database import get_async_session
from bot.core.models import BeerTypeEnum
from bot.repositories.beer_repo import BeerRepository
from bot.repositories.user_repo import UserRepository
from bot.core.schemas import UserCreate
from bot.utils.logger import setup_logger
import pendulum

logger = setup_logger(__name__)
router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_birth_date = State()


def get_command_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üç∫ –í—ã–±—Ä–∞—Ç—å –ø–∏–≤–æ", callback_data="cmd_beer")
    )
    builder.add(
        types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="cmd_profile")
    )
    builder.adjust(2)
    return builder.as_markup()


@router.message(CommandStart())
async def start_handler(message: types.Message, bot: Bot, state: FSMContext):
    try:
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, message.from_user.id
            )
            if user:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user.name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_command_keyboard(),
                )
            else:
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                    "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                )
                await state.set_state(RegistrationStates.waiting_for_name)
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            # reply_markup=get_command_keyboard(),
        )


@router.callback_query(lambda c: c.data == "cmd_start")
async def cmd_start_callback(
    callback_query: types.CallbackQuery, bot: Bot, state: FSMContext
):
    try:
        await callback_query.answer()
        await state.clear()  # Clear any FSM state to reset the user
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(
                session, callback_query.from_user.id
            )
            if user:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=f"üëã –ü—Ä–∏–≤–µ—Ç, {user.name}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_command_keyboard(),
                )
            else:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=f"üëã –ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}!\n"
                    "–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                )
                await state.set_state(RegistrationStates.waiting_for_name)
    except Exception as e:
        logger.error(f"Error in start callback: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            # reply_markup=get_command_keyboard(),
        )


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not (1 <= len(name) <= 50):
        await message.bot.send_message(
            chat_id=message.chat.id,
            text="–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            # reply_markup=get_command_keyboard(),
        )
        return
    await state.update_data(name=name)
    await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990",
        # reply_markup=get_command_keyboard(),
    )
    await state.set_state(RegistrationStates.waiting_for_birth_date)


@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    try:
        date_str = message.text.strip()
        birth_date = pendulum.from_format(
            date_str, "DD.MM.YYYY", tz="Europe/Moscow"
        ).date()
        today = pendulum.now("Europe/Moscow").date()
        age = (
            today.year
            - birth_date.year
            - ((today.month, today.day) < (birth_date.month, birth_date.day))
        )
        if age < 18:
            await message.bot.send_message(
                chat_id=message.chat.id,
                text="–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–µ–±–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç üîû",
                # reply_markup=get_command_keyboard(),
            )
            return
        if birth_date > today:
            await message.bot.send_message(
                chat_id=message.chat.id,
                text="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º üìÖ",
                # reply_markup=get_command_keyboard(),
            )
            return
        user_data = await state.get_data()
        async for session in get_async_session():
            user_create = UserCreate(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                name=user_data["name"],
                birth_date=birth_date,
            )
            user = await UserRepository.create_user(session, user_create)
            await message.bot.send_message(
                chat_id=message.chat.id,
                text=f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üë§ –ò–º—è: {user.name}\n"
                f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å –ø–∏–≤–æ! üç∫\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_command_keyboard(),
            )
        await state.clear()
    except pendulum.exceptions.ParserError:
        await message.bot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! üìÖ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990",
            # reply_markup=get_command_keyboard(),
        )
    except Exception as e:
        logger.error(f"Error processing birth date: {e}")
        await message.bot.send_message(
            chat_id=message.chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            # reply_markup=get_command_keyboard(),
        )
