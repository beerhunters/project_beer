import logging
from aiogram import Router, types
from aiogram.filters import Command
from bot.core.database import get_async_session
from bot.repositories.user_repo import UserRepository
from bot.repositories.beer_repo import BeerRepository
from bot.core.models import BeerTypeEnum
import pendulum

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    try:
        async for session in get_async_session():
            user = await UserRepository.get_user_by_telegram_id(  # get_user_with_choices –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                session, message.from_user.id
            )
            if not user:
                await message.answer(
                    "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            today = pendulum.now().date()
            age = (
                today.year
                - user.birth_date.year
                - (
                    (today.month, today.day)
                    < (user.birth_date.month, user.birth_date.day)
                )
            )
            user_stats = await BeerRepository.get_user_beer_stats(session, user.id)
            latest_choice = await BeerRepository.get_latest_user_choice(
                session, user.id
            )
            beer_names = {
                BeerTypeEnum.LAGER.value: "üç∫ Lager",
                BeerTypeEnum.HAND_OF_GOD.value: "üçª Hand of God",
            }
            profile_text = f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            profile_text += f"üìõ –ò–º—è: {user.name}\n"
            profile_text += (
                f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date.strftime('%d.%m.%Y')}\n"
            )
            profile_text += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
            profile_text += f"üÜî Telegram ID: {user.telegram_id}\n"
            profile_text += (
                f"üì™ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            )
            profile_text += (
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
            profile_text += "üç∫ **–¢–≤–æ–∏ –≤—ã–±–æ—Ä—ã –ø–∏–≤–∞**:\n"
            if user_stats:
                for beer_type_value, count in user_stats.items():
                    profile_text += f"{beer_names.get(beer_type_value, beer_type_value)}: {count} —Ä–∞–∑(–∞)\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ "—Ä–∞–∑(–∞)" –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            else:
                profile_text += "–¢—ã –µ—â–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª –ø–∏–≤–æ!\n"
            if latest_choice:
                latest_beer_display_name = beer_names.get(
                    (
                        latest_choice.beer_type.value
                        if isinstance(latest_choice.beer_type, enum.Enum)
                        else latest_choice.beer_type
                    ),
                    str(latest_choice.beer_type),
                )
                profile_text += f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä: {latest_beer_display_name} "
                profile_text += (
                    f"({latest_choice.selected_at.strftime('%d.%m.%Y %H:%M')})\n"
                )
            profile_text += "\nüîÑ /beer - –≤—ã–±—Ä–∞—Ç—å –ø–∏–≤–æ\n"
            profile_text += "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            await message.answer(profile_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in profile handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
