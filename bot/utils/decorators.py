import random
from functools import wraps
from typing import Callable, Any
from aiogram.types import Message, CallbackQuery
from aiogram import Bot


def private_chat_only(response_probability: float = 0.5, responses: list[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö.
    –í –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é response_probability –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
    –∏–∑ —Å–ø–∏—Å–∫–∞ responses –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.

    Args:
        response_probability (float): –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (0.0 - 1.0).
        responses (list[str]): –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    """
    if responses is None:
        responses = [
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö! üòä",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ. üôè",
            "–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–∞—Ö, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É! ‚úâÔ∏è",
        ]

    def decorator(handler: Callable) -> Callable:
        @wraps(handler)
        async def wrapper(*args, **kwargs) -> Any:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Message –∏–ª–∏ CallbackQuery –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            event = next(
                (arg for arg in args if isinstance(arg, (Message, CallbackQuery))), None
            )
            if not event:
                return await handler(*args, **kwargs)

            bot: Bot = kwargs.get("bot") or next(
                (arg for arg in args if isinstance(arg, Bot)), None
            )
            if not bot:
                return await handler(*args, **kwargs)

            chat = event.chat if isinstance(event, Message) else event.message.chat
            if chat.type == "private":
                return await handler(*args, **kwargs)
            else:
                if random.random() < response_probability:
                    response = random.choice(responses)
                    if isinstance(event, Message):
                        await bot.send_message(chat_id=chat.id, text=response)
                    elif isinstance(event, CallbackQuery):
                        await bot.send_message(chat_id=chat.id, text=response)
                        await event.answer()
                return None

        return wrapper

    return decorator


def group_chat_only(response_probability: float = 0.5, responses: list[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö.
    –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é response_probability –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
    –∏–∑ —Å–ø–∏—Å–∫–∞ responses –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.

    Args:
        response_probability (float): –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (0.0 - 1.0).
        responses (list[str]): –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    """
    if responses is None:
        responses = [
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö! üòä",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–µ. üôè",
            "–Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É! üë•",
        ]

    def decorator(handler: Callable) -> Callable:
        @wraps(handler)
        async def wrapper(*args, **kwargs) -> Any:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Message –∏–ª–∏ CallbackQuery –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            event = next(
                (arg for arg in args if isinstance(arg, (Message, CallbackQuery))), None
            )
            if not event:
                return await handler(*args, **kwargs)

            bot: Bot = kwargs.get("bot") or next(
                (arg for arg in args if isinstance(arg, Bot)), None
            )
            if not bot:
                return await handler(*args, **kwargs)

            chat = event.chat if isinstance(event, Message) else event.message.chat
            if chat.type in ("group", "supergroup", "channel"):
                return await handler(*args, **kwargs)
            else:
                if random.random() < response_probability:
                    response = random.choice(responses)
                    if isinstance(event, Message):
                        await bot.send_message(chat_id=chat.id, text=response)
                    elif isinstance(event, CallbackQuery):
                        await bot.send_message(chat_id=chat.id, text=response)
                        await event.answer()
                return None

        return wrapper

    return decorator
